// Exemple de listage des √©crans et des p√©riph√©riques audio
import { screens, audioDevices, microphoneDevices, supportsHDRCapture, videoCodecs } from 'screencapturekit';

async function main() {
  try {
    console.log('----------------------------------------------------');
    console.log('INFORMATIONS SUR LES P√âRIPH√âRIQUES DISPONIBLES');
    console.log('----------------------------------------------------');
    
    // V√©rifier le support HDR
    console.log(`\nüé® Support HDR: ${supportsHDRCapture ? '‚úÖ Support√©' : '‚ùå Non support√©'}`);
    
    // Lister les codecs vid√©o disponibles
    console.log('\nüìπ CODECS VID√âO DISPONIBLES:');
    console.log('----------------------------------------------------');
    if (videoCodecs && videoCodecs.size > 0) {
      for (const [key, value] of videoCodecs.entries()) {
        console.log(`   - ${key}: ${value}`);
      }
    } else {
      console.log('   Aucun codec vid√©o disponible');
    }
    
    // Lister les √©crans disponibles
    console.log('\nüñ•Ô∏è  √âCRANS DISPONIBLES:');
    console.log('----------------------------------------------------');
    const availableScreens = await screens();
    if (availableScreens && availableScreens.length > 0) {
      availableScreens.forEach((screen, index) => {
        console.log(`   Screen ${index}: ID=${screen.id}, ${screen.width}x${screen.height}`);
      });
    } else {
      console.log('   Aucun √©cran disponible');
    }
    
    // Lister les p√©riph√©riques audio syst√®me
    console.log('\nüîä P√âRIPH√âRIQUES AUDIO SYST√àME:');
    console.log('----------------------------------------------------');
    const systemAudio = await audioDevices();
    if (systemAudio && systemAudio.length > 0) {
      systemAudio.forEach((device, index) => {
        console.log(`   Device ${index}: ID=${device.id}, Name="${device.name}", Manufacturer="${device.manufacturer}"`);
      });
    } else {
      console.log('   Aucun p√©riph√©rique audio syst√®me disponible');
    }
    
    // Lister les p√©riph√©riques microphone (macOS 14+)
    console.log('\nüé§ P√âRIPH√âRIQUES MICROPHONE (macOS 14+):');
    console.log('----------------------------------------------------');
    try {
      const mics = await microphoneDevices();
      if (mics && mics.length > 0) {
        mics.forEach((mic, index) => {
          console.log(`   Mic ${index}: ID="${mic.id}", Name="${mic.name}", Manufacturer="${mic.manufacturer}"`);
        });
      } else {
        console.log('   Aucun microphone disponible');
      }
    } catch (error) {
      console.log(`   ‚ùå Non disponible: ${error.message}`);
    }
    
    console.log('\n‚úÖ Fin de l\'√©num√©ration des p√©riph√©riques');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'√©num√©ration des p√©riph√©riques:', error);
  }
}

main(); 